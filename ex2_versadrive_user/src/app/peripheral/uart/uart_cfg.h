////////////////////////////////////////////////////////////////////////////////
// COPYRIGHT (c) 2021
// EMSISO
// All rights reserved.
////////////////////////////////////////////////////////////////////////////////
/**
 * @file     uart_cfg.h
 * @brief    UART peripheral driver configuration file.
 * @author   Matej Otic
 * @author   Uros Sadek
 * @date     22.05.2021
 * @version  V1.0.0
 */
////////////////////////////////////////////////////////////////////////////////
/**
 * @addtogroup UART_CONFIGURATION
 * @{ <!-- BEGIN GROUP -->
 */
////////////////////////////////////////////////////////////////////////////////

#ifndef __UART_CFG_H
#define __UART_CFG_H

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "priorities.h"
#include "project_config.h"

////////////////////////////////////////////////////////////////////////////////
// General settings
////////////////////////////////////////////////////////////////////////////////

/**
 * Number of used UART peripheral modules.
 */
#define UART_MAX_MODULES          (3)

/**
 * Maximum number of CPU ticks to wait for free Tx buffer.
 */
#define UART_TX_TIMEOUT_TICKS     (1000000U)

////////////////////////////////////////////////////////////////////////////////
// RTOS settings
////////////////////////////////////////////////////////////////////////////////

/**
 * RTOS Mutex resource for access to peripheral:
 * 0 - None.\n
 * 1 - FreeRTOS.\n
 * \n
 * Every UART instance will have its own Mutex.
 */
#define UART_USE_RTOS             (0)

/**
 * RTOS Mutex timeout in [ms].
 */
#define UART_MUTEX_TIMEOUT_MS     (10)

////////////////////////////////////////////////////////////////////////////////
// Interrupt priority settings
////////////////////////////////////////////////////////////////////////////////

/**
 * Interrupt priority for UART1.
 */
#define UART_ISR_PRIORITY_MODULE0 (PROJECT_ISR_PRIO_USART1)

#if (UART_MAX_MODULES > 1)
/**
 * Interrupt priority for UART2.
 */
#define UART_ISR_PRIORITY_MODULE1 (PROJECT_ISR_PRIO_USART2)
#endif

#if (UART_MAX_MODULES > 2)
/**
 * Interrupt priority for UART3.
 */
#define UART_ISR_PRIORITY_MODULE2 (PROJECT_ISR_PRIO_USART3)
#endif

////////////////////////////////////////////////////////////////////////////////
// Debug settings
////////////////////////////////////////////////////////////////////////////////

/**
 * Define if ASSERTs are enabled or not.
 */
#define UART_ASSERT_ENABLE (0)

// parasoft-begin-suppress FORMAT-02 FORMAT-03 FORMAT-34  "Used only for debugging"
#if (UART_ASSERT_ENABLE)
#define UART_ASSERT(x) \
    if (!(x))          \
    {                  \
        while (1)      \
        {              \
        }              \
    }
#else
#define UART_ASSERT(x) \
    {                  \
        ;              \
    }
#endif
// parasoft-end-suppress FORMAT-02 FORMAT-03 FORMAT-34

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

//
// Leave below code unchanged!!
//

/**
 * Forward declaration of UART pins structure
 */
struct uart_pins_s;

/**
 * Typedef UART pins structure.
 */
typedef struct uart_pins_s uart_pins_t;

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
void                     uart_post_init(void);
const uart_pins_t *const uart_get_pin_table_ptr(void);

#endif // __UART_CFG_H
////////////////////////////////////////////////////////////////////////////////
/**
 * @} <!-- END GROUP -->
 */
////////////////////////////////////////////////////////////////////////////////
