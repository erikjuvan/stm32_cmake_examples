////////////////////////////////////////////////////////////////////////////////
// COPYRIGHT (c) 2020
// EMTAS, EMSISO
// All rights reserved.
////////////////////////////////////////////////////////////////////////////////
/**
*@file   co_time.h
*@brief  contains defines for time services
*@author Zdenko Mezgec
*@author EMTAS
*@date   03.12.2020
*/
////////////////////////////////////////////////////////////////////////////////
/**
*@addtogroup CANOPEN
* @{ <!-- BEGIN GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////

#ifndef CO_TIME_H
#define CO_TIME_H 1

////////////////////////////////////////////////////////////////////////////////
// Includes
////////////////////////////////////////////////////////////////////////////////
#include "co_datatype.h"

////////////////////////////////////////////////////////////////////////////////
// Definitions
////////////////////////////////////////////////////////////////////////////////

#define CO_TIME_PRODUCER_BIT	0x40000000ul
#define CO_TIME_CONSUMER_BIT	0x80000000ul

/**
* TIME_OF_DAY structure
*/
typedef struct {
	UNSIGNED32	msec;			/**< milliseconds after midnight */
	UNSIGNED16	days;			/**< days after 1st january of 1970 */
} CO_TIME_T;


/** \brief function pointer to time function 
 *
 * \param pTime - time of day structure
 * 
 * \return void
 */
typedef void (* CO_EVENT_TIME_T)(CO_TIME_T *pTime);

////////////////////////////////////////////////////////////////////////////////
// Functions
////////////////////////////////////////////////////////////////////////////////
RET_T coTimeWriteReq(CO_TIME_T const *pTimeData);
RET_T coTimeInit(BOOL_T	producer, BOOL_T consumer);
RET_T coEventRegister_TIME(CO_EVENT_TIME_T pFunction);

#endif /* CO_TIME_H */
////////////////////////////////////////////////////////////////////////////////
/**
* @} <!-- END GROUP -->
*/
////////////////////////////////////////////////////////////////////////////////
